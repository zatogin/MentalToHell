// <auto-generated />
using System;
using MentalToHell.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MentalToHell.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190909211049_UserPages")]
    partial class UserPages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MentalToHell.Models.misc.CurrentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CurrentStatuses");
                });

            modelBuilder.Entity("MentalToHell.Models.RelationAndAchive.PersonalRelationDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Day");

                    b.Property<int>("Mood");

                    b.Property<string>("PersonalRelation")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RelationLink")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ReportMoodId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReportMoodId");

                    b.ToTable("PersonalRelationDays");
                });

            modelBuilder.Entity("MentalToHell.Models.RelationAndAchive.PersonalRelationMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Day");

                    b.Property<int>("Mood");

                    b.Property<string>("PersonalRelation")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RelationLink")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ReportMoodId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReportMoodId");

                    b.ToTable("PersonalRelationMonths");
                });

            modelBuilder.Entity("MentalToHell.Models.RelationAndAchive.PersonalRelationWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Day");

                    b.Property<int>("Mood");

                    b.Property<string>("PersonalRelation")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RelationLink")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ReportMoodId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReportMoodId");

                    b.ToTable("PersonalRelationWeeks");
                });

            modelBuilder.Entity("MentalToHell.Models.RelationAndAchive.PersonalRelationYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Day");

                    b.Property<int>("Mood");

                    b.Property<string>("PersonalRelation")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RelationLink")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ReportMoodId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReportMoodId");

                    b.ToTable("PersonalRelationYears");
                });

            modelBuilder.Entity("MentalToHell.Models.Reports.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationUserId")
                        .IsRequired();

                    b.Property<string>("ApplicationUsersId");

                    b.Property<string>("HobbyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("HobbySpec")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUsersId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("MentalToHell.Models.Reports.Motivation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationUserId")
                        .IsRequired();

                    b.Property<string>("ApplicationUsersId");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("MotivationText")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUsersId");

                    b.ToTable("Motivations");
                });

            modelBuilder.Entity("MentalToHell.Models.Reports.PartyTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationUserId")
                        .IsRequired();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("PartyTimes");
                });

            modelBuilder.Entity("MentalToHell.Models.Reports.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<DateTime>("Day");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Image1")
                        .HasMaxLength(256);

                    b.Property<string>("Image2")
                        .HasMaxLength(256);

                    b.Property<string>("Image3")
                        .HasMaxLength(256);

                    b.Property<int>("ReportMoodId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReportMoodId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("MentalToHell.Models.Reports.ReportMood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MoodName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ReportMoods");
                });

            modelBuilder.Entity("MentalToHell.Models.User.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("MentalToHell.Models.User.JobSatisfaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentStatusId");

                    b.Property<string>("JobSatisfactionText")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("CurrentStatusId");

                    b.ToTable("JobSatisfactions");
                });

            modelBuilder.Entity("MentalToHell.Models.User.PersonalLyfeJoy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentStatusId");

                    b.Property<string>("LifeJoyExpl")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("CurrentStatusId");

                    b.ToTable("PersonalLyfeJoys");
                });

            modelBuilder.Entity("MentalToHell.Models.User.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReligionType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("MentalToHell.Models.User.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SexName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("MentalToHell.Models.User.Temperament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TemperamentName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Temperaments");
                });

            modelBuilder.Entity("MentalToHell.Models.User.UserPersonalState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationUserId")
                        .IsRequired();

                    b.Property<string>("AttitudeToLife")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Credo")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int?>("GenderId")
                        .IsRequired();

                    b.Property<string>("JobPlace")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("JobPosition")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("JobSatisfactionId")
                        .IsRequired();

                    b.Property<int?>("PersonalLyfeJoyId")
                        .IsRequired();

                    b.Property<int?>("ReligionId")
                        .IsRequired();

                    b.Property<int?>("SexId")
                        .IsRequired();

                    b.Property<int?>("TemperamentId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("JobSatisfactionId");

                    b.HasIndex("PersonalLyfeJoyId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SexId");

                    b.HasIndex("TemperamentId");

                    b.ToTable("UserPersonalStates");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.ToThinkAbout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("StatusId");

                    b.Property<string>("ToThinkKey")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.Property<string>("WhatText")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("WhatToStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("WhatToStatusId");

                    b.ToTable("ToThinkAbout");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.WhatToRead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("StatusId");

                    b.Property<string>("ToRead")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.Property<int?>("WhatToStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("WhatToStatusId");

                    b.ToTable("WhatToRead");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.WhatToStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WhatStatus")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("WhatToStatus");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.WhatToTaste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("StatusId");

                    b.Property<string>("ToEat")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.Property<int?>("WhatToStatusId");

                    b.Property<string>("WhereToEat")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("WhatToStatusId");

                    b.ToTable("WhatToTaste");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.WhatToWatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("StatusId");

                    b.Property<string>("ToBe")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.Property<int?>("WhatToStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("WhatToStatusId");

                    b.ToTable("WhatToWatch");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.WhereToBe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("StatusId");

                    b.Property<string>("ToBe")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.Property<int?>("WhatToStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("WhatToStatusId");

                    b.ToTable("WhereToBe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MentalToHell.Models.User.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Nicname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("PartyTimeId");

                    b.Property<int>("UserPersonalStateId");

                    b.HasIndex("PartyTimeId");

                    b.HasIndex("UserPersonalStateId")
                        .IsUnique()
                        .HasFilter("[UserPersonalStateId] IS NOT NULL");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("MentalToHell.Models.RelationAndAchive.PersonalRelationDay", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("PersonalRelationDays")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.Reports.ReportMood", "ReportMood")
                        .WithMany("PersonalRelationDays")
                        .HasForeignKey("ReportMoodId");
                });

            modelBuilder.Entity("MentalToHell.Models.RelationAndAchive.PersonalRelationMonth", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("PersonalRelationMonths")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.Reports.ReportMood", "ReportMood")
                        .WithMany("PersonalRelationMonths")
                        .HasForeignKey("ReportMoodId");
                });

            modelBuilder.Entity("MentalToHell.Models.RelationAndAchive.PersonalRelationWeek", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("PersonalRelationWeeks")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.Reports.ReportMood", "ReportMood")
                        .WithMany("PersonalRelationWeeks")
                        .HasForeignKey("ReportMoodId");
                });

            modelBuilder.Entity("MentalToHell.Models.RelationAndAchive.PersonalRelationYear", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("PersonalRelationYears")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.Reports.ReportMood", "ReportMood")
                        .WithMany("PersonalRelationYears")
                        .HasForeignKey("ReportMoodId");
                });

            modelBuilder.Entity("MentalToHell.Models.Reports.Hobby", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUsers")
                        .WithMany("Hobbies")
                        .HasForeignKey("ApplicationUsersId");
                });

            modelBuilder.Entity("MentalToHell.Models.Reports.Motivation", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUsers")
                        .WithMany("Motivations")
                        .HasForeignKey("ApplicationUsersId");
                });

            modelBuilder.Entity("MentalToHell.Models.Reports.Report", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("Reports")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.Reports.ReportMood", "ReportMood")
                        .WithMany("Reports")
                        .HasForeignKey("ReportMoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MentalToHell.Models.User.JobSatisfaction", b =>
                {
                    b.HasOne("MentalToHell.Models.misc.CurrentStatus", "CurrentStatus")
                        .WithMany("JobSatisfactions")
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MentalToHell.Models.User.PersonalLyfeJoy", b =>
                {
                    b.HasOne("MentalToHell.Models.misc.CurrentStatus", "CurrentStatus")
                        .WithMany("PersonalLyfeJoys")
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MentalToHell.Models.User.UserPersonalState", b =>
                {
                    b.HasOne("MentalToHell.Models.User.Gender", "Gender")
                        .WithMany("UserPersonalStates")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MentalToHell.Models.User.JobSatisfaction", "JobSatisfaction")
                        .WithMany("UserPersonalStates")
                        .HasForeignKey("JobSatisfactionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MentalToHell.Models.User.PersonalLyfeJoy", "PersonalLyfeJoy")
                        .WithMany("UserPersonalStates")
                        .HasForeignKey("PersonalLyfeJoyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MentalToHell.Models.User.Religion", "Religion")
                        .WithMany("UserPersonalStates")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MentalToHell.Models.User.Sex", "Sex")
                        .WithMany("UserPersonalStates")
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MentalToHell.Models.User.Temperament", "Temperament")
                        .WithMany("UserPersonalStates")
                        .HasForeignKey("TemperamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.ToThinkAbout", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("ToThinkAbouts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.WhatTo.WhatToStatus", "WhatToStatus")
                        .WithMany("ToThinkAbouts")
                        .HasForeignKey("WhatToStatusId");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.WhatToRead", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("WhatToReads")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.WhatTo.WhatToStatus", "WhatToStatus")
                        .WithMany("WhatToReads")
                        .HasForeignKey("WhatToStatusId");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.WhatToTaste", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("WhatToTastes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.WhatTo.WhatToStatus", "WhatToStatus")
                        .WithMany("WhatToTastes")
                        .HasForeignKey("WhatToStatusId");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.WhatToWatch", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("WhatToWatches")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.WhatTo.WhatToStatus", "WhatToStatus")
                        .WithMany("WhatToWatches")
                        .HasForeignKey("WhatToStatusId");
                });

            modelBuilder.Entity("MentalToHell.Models.WhatTo.WhereToBe", b =>
                {
                    b.HasOne("MentalToHell.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany("WhereToBes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MentalToHell.Models.WhatTo.WhatToStatus", "WhatToStatus")
                        .WithMany("WhereToBes")
                        .HasForeignKey("WhatToStatusId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MentalToHell.Models.User.ApplicationUser", b =>
                {
                    b.HasOne("MentalToHell.Models.Reports.PartyTime")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("PartyTimeId");

                    b.HasOne("MentalToHell.Models.User.UserPersonalState", "UserPersonalState")
                        .WithOne("ApplicationUsers")
                        .HasForeignKey("MentalToHell.Models.User.ApplicationUser", "UserPersonalStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
